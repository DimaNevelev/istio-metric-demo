# Configuration for metric instances
apiVersion: config.istio.io/v1alpha2
kind: instance
metadata:
  name: myrequestcount
  namespace: istio-system
spec:
  compiledTemplate: metric
  params:
    value: "1"
    dimensions:
      reporter: conditional((context.reporter.kind | "inbound") == "outbound", "source", "destination")
      source: source.workload.name | "unknown"
      source_workload: source.workload.name | "unknown"
      source_workload_namespace: source.workload.namespace | "unknown"
      destination: destination.workload.name | "unknown"
      message: '"tenant-" + request.headers["tenant"] | request.auth.claims["tenant"] | "unknown"'
    monitored_resource_type: '"UNSPECIFIED"'
---
# Configuration for a Prometheus handler
apiVersion: config.istio.io/v1alpha2
kind: handler
metadata:
  name: myrequesthandler
  namespace: istio-system
spec:
  compiledAdapter: prometheus
  params:
    metrics:
      - name: my_request_count # Prometheus metric name
        instance_name: myrequestcount.instance.istio-system # Mixer instance name (fully-qualified)
        kind: COUNTER
        label_names:
          - reporter
          - source
          - destination
          - message
          - source_workload
          - source_workload_namespace
---
# Rule to send metric instances to a Prometheus handler
apiVersion: config.istio.io/v1alpha2
kind: rule
metadata:
  name: myprom
  namespace: istio-system
spec:
  actions:
    - handler: myrequesthandler
      instances: [ myrequestcount ]
